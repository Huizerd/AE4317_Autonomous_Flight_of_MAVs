/* This file has been generated by gen_settings from /home/michiel/paparazzi/var/aircrafts/bebop_orange_avoid/settings_autopilot.xml /home/michiel/paparazzi/var/aircrafts/bebop_orange_avoid/settings_telemetry.xml /home/michiel/paparazzi/var/aircrafts/bebop_orange_avoid/settings_flightplan.xml /home/michiel/paparazzi/var/aircrafts/bebop_orange_avoid/settings_modules.xml -- /home/michiel/paparazzi/conf/settings/rotorcraft_basic.xml /home/michiel/paparazzi/conf/modules/video_rtp_stream.xml /home/michiel/paparazzi/conf/modules/cv_colorfilter.xml /home/michiel/paparazzi/conf/modules/air_data.xml /home/michiel/paparazzi/conf/modules/ins_extended.xml /home/michiel/paparazzi/conf/modules/ahrs_int_cmpl_quat.xml /home/michiel/paparazzi/conf/modules/stabilization_indi_simple.xml /home/michiel/paparazzi/conf/modules/nav_basic_rotorcraft.xml /home/michiel/paparazzi/conf/modules/guidance_rotorcraft.xml /home/michiel/paparazzi/conf/modules/gps.xml /home/michiel/paparazzi/conf/modules/imu_common.xml */
/* Version v5.13_devel-166-gae18987-dirty */
/* Please DO NOT EDIT */

#ifndef SETTINGS_H
#define SETTINGS_H

#define RCSettings(mode_changed) { \
}

#include "air_data/air_data.h"
#include "autopilot.h"
#include "computer_vision/viewvideo.h"
#include "generated/periodic_telemetry.h"
#include "guidance/guidance_h.h"
#include "guidance/guidance_v.h"
#include "navigation.h"
#include "stabilization/stabilization_indi_simple.h"
#include "subsystems/ahrs/ahrs_int_cmpl_quat.h"
#include "subsystems/gps.h"
#include "subsystems/imu.h"
#include "subsystems/ins/vf_extended_float.h"
#include "generated/modules.h"

#define SETTINGS_NAMES { \
 { "telemetry_mode_Main" }, \
 { "video_thread_video_thread_periodic_status" }, \
 { "logger_file_file_logger_periodic_status" }, \
 { "gps_datalink_gps_datalink_periodic_check_status" }, \
 { "autopilot_mode_auto2" }, \
 { "autopilot.kill_throttle" }, \
 { "autopilot.power_switch" }, \
 { "autopilot.mode" }, \
 { "viewvideo.use_rtp" }, \
 { "listener->active" }, \
 { "color_lum_min" }, \
 { "color_lum_max" }, \
 { "color_cb_min" }, \
 { "color_cb_max" }, \
 { "color_cr_min" }, \
 { "color_cr_max" }, \
 { "air_data.qnh" }, \
 { "air_data.tas_factor" }, \
 { "air_data.calc_qnh_once" }, \
 { "air_data.calc_airspeed" }, \
 { "air_data.calc_tas_factor" }, \
 { "air_data.calc_amsl_baro" }, \
 { "vff.accel_noise" }, \
 { "vff.r_baro" }, \
 { "vff.r_alt" }, \
 { "vff.r_offset" }, \
 { "ahrs_icq.gravity_heuristic_factor" }, \
 { "ahrs_icq.accel_omega" }, \
 { "ahrs_icq.accel_zeta" }, \
 { "ahrs_icq.mag_omega" }, \
 { "ahrs_icq.mag_zeta" }, \
 { "indi.reference_acceleration.err_p" }, \
 { "indi.reference_acceleration.rate_p" }, \
 { "indi.g1.p" }, \
 { "indi.reference_acceleration.err_q" }, \
 { "indi.reference_acceleration.rate_q" }, \
 { "indi.g1.q" }, \
 { "indi.reference_acceleration.err_r" }, \
 { "indi.reference_acceleration.rate_r" }, \
 { "indi.g1.r" }, \
 { "indi.g2" }, \
 { "indi.adaptive" }, \
 { "indi.max_rate" }, \
 { "indi.attitude_max_yaw_rate" }, \
 { "flight_altitude" }, \
 { "nav_heading" }, \
 { "nav_radius" }, \
 { "nav_climb_vspeed" }, \
 { "nav_descend_vspeed" }, \
 { "guidance_v_kp" }, \
 { "guidance_v_kd" }, \
 { "guidance_v_ki" }, \
 { "guidance_v_nominal_throttle" }, \
 { "guidance_v_adapt_throttle_enabled" }, \
 { "guidance_v_z_sp" }, \
 { "guidance_h.use_ref" }, \
 { "gh_ref.max_speed" }, \
 { "guidance_h.approx_force_by_thrust" }, \
 { "gh_ref.tau" }, \
 { "gh_ref.omega" }, \
 { "gh_ref.zeta" }, \
 { "guidance_h.gains.p" }, \
 { "guidance_h.gains.d" }, \
 { "guidance_h.gains.i" }, \
 { "guidance_h.gains.v" }, \
 { "guidance_h.gains.a" }, \
 { "guidance_h.sp.pos.x" }, \
 { "guidance_h.sp.pos.y" }, \
 { "multi_gps_mode" }, \
 { "imu.body_to_imu.eulers_f.phi" }, \
 { "imu.body_to_imu.eulers_f.theta" }, \
 { "imu.body_to_imu.eulers_f.psi" }, \
 { "imu.b2i_set_current" }, \
};
#define SETTINGS_NAMES_SHORT { \
 "tel_mod_Mai" , \
 "vid_thr_vid_thr_" , \
 "log_fil_fil_log_" , \
 "gps_dat_gps_dat_" , \
 "aut_mod_aut" , \
 "aut_kil_thr" , \
 "aut_pow_swi" , \
 "aut_mod" , \
 "vie_use_rtp" , \
 "lis" , \
 "col_lum_min" , \
 "col_lum_max" , \
 "col_cb_min" , \
 "col_cb_max" , \
 "col_cr_min" , \
 "col_cr_max" , \
 "air_dat_qnh" , \
 "air_dat_tas_fac" , \
 "air_dat_cal_qnh_" , \
 "air_dat_cal_air" , \
 "air_dat_cal_tas_" , \
 "air_dat_cal_ams_" , \
 "vff_acc_noi" , \
 "vff_r_bar" , \
 "vff_r_alt" , \
 "vff_r_off" , \
 "ahr_icq_gra_heu_" , \
 "ahr_icq_acc_ome" , \
 "ahr_icq_acc_zet" , \
 "ahr_icq_mag_ome" , \
 "ahr_icq_mag_zet" , \
 "ind_ref_acc_err_" , \
 "ind_ref_acc_rat_" , \
 "ind_g1_p" , \
 "ind_ref_acc_err_" , \
 "ind_ref_acc_rat_" , \
 "ind_g1_q" , \
 "ind_ref_acc_err_" , \
 "ind_ref_acc_rat_" , \
 "ind_g1_r" , \
 "ind_g2" , \
 "ind_ada" , \
 "ind_max_rat" , \
 "ind_att_max_yaw_" , \
 "fli_alt" , \
 "nav_hea" , \
 "nav_rad" , \
 "nav_cli_vsp" , \
 "nav_des_vsp" , \
 "gui_v_kp" , \
 "gui_v_kd" , \
 "gui_v_ki" , \
 "gui_v_nom_thr" , \
 "gui_v_ada_thr_en" , \
 "gui_v_z_sp" , \
 "gui_h_use_ref" , \
 "gh_ref_max_spe" , \
 "gui_h_app_for_by" , \
 "gh_ref_tau" , \
 "gh_ref_ome" , \
 "gh_ref_zet" , \
 "gui_h_gai_p" , \
 "gui_h_gai_d" , \
 "gui_h_gai_i" , \
 "gui_h_gai_v" , \
 "gui_h_gai_a" , \
 "gui_h_sp_pos_x" , \
 "gui_h_sp_pos_y" , \
 "mul_gps_mod" , \
 "imu_bod_to_imu_e" , \
 "imu_bod_to_imu_e" , \
 "imu_bod_to_imu_e" , \
 "imu_b2i_set_cur" , \
};
#define NB_SETTING 73
#define DlSetting(_idx, _value) { \
  switch (_idx) { \
    case 0: telemetry_mode_Main = _value; break;\
    case 1: video_thread_video_thread_periodic_status = _value; break;\
    case 2: logger_file_file_logger_periodic_status = _value; break;\
    case 3: gps_datalink_gps_datalink_periodic_check_status = _value; break;\
    case 4: autopilot_mode_auto2 = _value; break;\
    case 5: autopilot_KillThrottle( _value ); _value = autopilot.kill_throttle; break;\
    case 6: autopilot_SetPowerSwitch( _value ); _value = autopilot.power_switch; break;\
    case 7: autopilot_SetModeHandler( _value ); _value = autopilot.mode; break;\
    case 8: viewvideo.use_rtp = _value; break;\
    case 9: listener->active = _value; break;\
    case 10: color_lum_min = _value; break;\
    case 11: color_lum_max = _value; break;\
    case 12: color_cb_min = _value; break;\
    case 13: color_cb_max = _value; break;\
    case 14: color_cr_min = _value; break;\
    case 15: color_cr_max = _value; break;\
    case 16: air_data.qnh = _value; break;\
    case 17: air_data.tas_factor = _value; break;\
    case 18: air_data.calc_qnh_once = _value; break;\
    case 19: air_data.calc_airspeed = _value; break;\
    case 20: air_data.calc_tas_factor = _value; break;\
    case 21: air_data.calc_amsl_baro = _value; break;\
    case 22: vff.accel_noise = _value; break;\
    case 23: vff.r_baro = _value; break;\
    case 24: vff.r_alt = _value; break;\
    case 25: vff.r_offset = _value; break;\
    case 26: ahrs_icq.gravity_heuristic_factor = _value; break;\
    case 27: ahrs_int_cmpl_quat_SetAccelOmega( _value ); _value = ahrs_icq.accel_omega; break;\
    case 28: ahrs_int_cmpl_quat_SetAccelZeta( _value ); _value = ahrs_icq.accel_zeta; break;\
    case 29: ahrs_int_cmpl_quat_SetMagOmega( _value ); _value = ahrs_icq.mag_omega; break;\
    case 30: ahrs_int_cmpl_quat_SetMagZeta( _value ); _value = ahrs_icq.mag_zeta; break;\
    case 31: indi.reference_acceleration.err_p = _value; break;\
    case 32: indi.reference_acceleration.rate_p = _value; break;\
    case 33: indi.g1.p = _value; break;\
    case 34: indi.reference_acceleration.err_q = _value; break;\
    case 35: indi.reference_acceleration.rate_q = _value; break;\
    case 36: indi.g1.q = _value; break;\
    case 37: indi.reference_acceleration.err_r = _value; break;\
    case 38: indi.reference_acceleration.rate_r = _value; break;\
    case 39: indi.g1.r = _value; break;\
    case 40: indi.g2 = _value; break;\
    case 41: indi.adaptive = _value; break;\
    case 42: indi.max_rate = _value; break;\
    case 43: indi.attitude_max_yaw_rate = _value; break;\
    case 44: navigation_SetFlightAltitude( _value ); _value = flight_altitude; break;\
    case 45: nav_heading = _value; break;\
    case 46: nav_radius = _value; break;\
    case 47: nav_climb_vspeed = _value; break;\
    case 48: nav_descend_vspeed = _value; break;\
    case 49: guidance_v_kp = _value; break;\
    case 50: guidance_v_kd = _value; break;\
    case 51: guidance_v_SetKi( _value ); _value = guidance_v_ki; break;\
    case 52: guidance_v_nominal_throttle = _value; break;\
    case 53: guidance_v_adapt_throttle_enabled = _value; break;\
    case 54: guidance_v_z_sp = _value; break;\
    case 55: guidance_h_SetUseRef( _value ); _value = guidance_h.use_ref; break;\
    case 56: guidance_h_SetMaxSpeed( _value ); _value = gh_ref.max_speed; break;\
    case 57: guidance_h.approx_force_by_thrust = _value; break;\
    case 58: guidance_h_SetTau( _value ); _value = gh_ref.tau; break;\
    case 59: guidance_h_SetOmega( _value ); _value = gh_ref.omega; break;\
    case 60: guidance_h_SetZeta( _value ); _value = gh_ref.zeta; break;\
    case 61: guidance_h.gains.p = _value; break;\
    case 62: guidance_h.gains.d = _value; break;\
    case 63: guidance_h_set_igain( _value ); _value = guidance_h.gains.i; break;\
    case 64: guidance_h.gains.v = _value; break;\
    case 65: guidance_h.gains.a = _value; break;\
    case 66: guidance_h.sp.pos.x = _value; break;\
    case 67: guidance_h.sp.pos.y = _value; break;\
    case 68: multi_gps_mode = _value; break;\
    case 69: imu_SetBodyToImuPhi( _value ); _value = imu.body_to_imu.eulers_f.phi; break;\
    case 70: imu_SetBodyToImuTheta( _value ); _value = imu.body_to_imu.eulers_f.theta; break;\
    case 71: imu_SetBodyToImuPsi( _value ); _value = imu.body_to_imu.eulers_f.psi; break;\
    case 72: imu_SetBodyToImuCurrent( _value ); _value = imu.b2i_set_current; break;\
    default: break;\
  }\
}
#define PeriodicSendDlValue(_trans, _dev) { \
  static uint8_t i;\
  float var;\
  if (i >= 73) i = 0;\
  switch (i) { \
    case 0: var = telemetry_mode_Main; break;\
    case 1: var = video_thread_video_thread_periodic_status; break;\
    case 2: var = logger_file_file_logger_periodic_status; break;\
    case 3: var = gps_datalink_gps_datalink_periodic_check_status; break;\
    case 4: var = autopilot_mode_auto2; break;\
    case 5: var = autopilot.kill_throttle; break;\
    case 6: var = autopilot.power_switch; break;\
    case 7: var = autopilot.mode; break;\
    case 8: var = viewvideo.use_rtp; break;\
    case 9: var = listener->active; break;\
    case 10: var = color_lum_min; break;\
    case 11: var = color_lum_max; break;\
    case 12: var = color_cb_min; break;\
    case 13: var = color_cb_max; break;\
    case 14: var = color_cr_min; break;\
    case 15: var = color_cr_max; break;\
    case 16: var = air_data.qnh; break;\
    case 17: var = air_data.tas_factor; break;\
    case 18: var = air_data.calc_qnh_once; break;\
    case 19: var = air_data.calc_airspeed; break;\
    case 20: var = air_data.calc_tas_factor; break;\
    case 21: var = air_data.calc_amsl_baro; break;\
    case 22: var = vff.accel_noise; break;\
    case 23: var = vff.r_baro; break;\
    case 24: var = vff.r_alt; break;\
    case 25: var = vff.r_offset; break;\
    case 26: var = ahrs_icq.gravity_heuristic_factor; break;\
    case 27: var = ahrs_icq.accel_omega; break;\
    case 28: var = ahrs_icq.accel_zeta; break;\
    case 29: var = ahrs_icq.mag_omega; break;\
    case 30: var = ahrs_icq.mag_zeta; break;\
    case 31: var = indi.reference_acceleration.err_p; break;\
    case 32: var = indi.reference_acceleration.rate_p; break;\
    case 33: var = indi.g1.p; break;\
    case 34: var = indi.reference_acceleration.err_q; break;\
    case 35: var = indi.reference_acceleration.rate_q; break;\
    case 36: var = indi.g1.q; break;\
    case 37: var = indi.reference_acceleration.err_r; break;\
    case 38: var = indi.reference_acceleration.rate_r; break;\
    case 39: var = indi.g1.r; break;\
    case 40: var = indi.g2; break;\
    case 41: var = indi.adaptive; break;\
    case 42: var = indi.max_rate; break;\
    case 43: var = indi.attitude_max_yaw_rate; break;\
    case 44: var = flight_altitude; break;\
    case 45: var = nav_heading; break;\
    case 46: var = nav_radius; break;\
    case 47: var = nav_climb_vspeed; break;\
    case 48: var = nav_descend_vspeed; break;\
    case 49: var = guidance_v_kp; break;\
    case 50: var = guidance_v_kd; break;\
    case 51: var = guidance_v_ki; break;\
    case 52: var = guidance_v_nominal_throttle; break;\
    case 53: var = guidance_v_adapt_throttle_enabled; break;\
    case 54: var = guidance_v_z_sp; break;\
    case 55: var = guidance_h.use_ref; break;\
    case 56: var = gh_ref.max_speed; break;\
    case 57: var = guidance_h.approx_force_by_thrust; break;\
    case 58: var = gh_ref.tau; break;\
    case 59: var = gh_ref.omega; break;\
    case 60: var = gh_ref.zeta; break;\
    case 61: var = guidance_h.gains.p; break;\
    case 62: var = guidance_h.gains.d; break;\
    case 63: var = guidance_h.gains.i; break;\
    case 64: var = guidance_h.gains.v; break;\
    case 65: var = guidance_h.gains.a; break;\
    case 66: var = guidance_h.sp.pos.x; break;\
    case 67: var = guidance_h.sp.pos.y; break;\
    case 68: var = multi_gps_mode; break;\
    case 69: var = imu.body_to_imu.eulers_f.phi; break;\
    case 70: var = imu.body_to_imu.eulers_f.theta; break;\
    case 71: var = imu.body_to_imu.eulers_f.psi; break;\
    case 72: var = imu.b2i_set_current; break;\
    default: var = 0.; break;\
  }\
  pprz_msg_send_DL_VALUE(_trans, _dev, AC_ID, &i, &var);\
  i++;\
}
static inline float settings_get_value(uint8_t i) {
  switch (i) {
    case 0: return telemetry_mode_Main;
    case 1: return video_thread_video_thread_periodic_status;
    case 2: return logger_file_file_logger_periodic_status;
    case 3: return gps_datalink_gps_datalink_periodic_check_status;
    case 4: return autopilot_mode_auto2;
    case 5: return autopilot.kill_throttle;
    case 6: return autopilot.power_switch;
    case 7: return autopilot.mode;
    case 8: return viewvideo.use_rtp;
    case 9: return listener->active;
    case 10: return color_lum_min;
    case 11: return color_lum_max;
    case 12: return color_cb_min;
    case 13: return color_cb_max;
    case 14: return color_cr_min;
    case 15: return color_cr_max;
    case 16: return air_data.qnh;
    case 17: return air_data.tas_factor;
    case 18: return air_data.calc_qnh_once;
    case 19: return air_data.calc_airspeed;
    case 20: return air_data.calc_tas_factor;
    case 21: return air_data.calc_amsl_baro;
    case 22: return vff.accel_noise;
    case 23: return vff.r_baro;
    case 24: return vff.r_alt;
    case 25: return vff.r_offset;
    case 26: return ahrs_icq.gravity_heuristic_factor;
    case 27: return ahrs_icq.accel_omega;
    case 28: return ahrs_icq.accel_zeta;
    case 29: return ahrs_icq.mag_omega;
    case 30: return ahrs_icq.mag_zeta;
    case 31: return indi.reference_acceleration.err_p;
    case 32: return indi.reference_acceleration.rate_p;
    case 33: return indi.g1.p;
    case 34: return indi.reference_acceleration.err_q;
    case 35: return indi.reference_acceleration.rate_q;
    case 36: return indi.g1.q;
    case 37: return indi.reference_acceleration.err_r;
    case 38: return indi.reference_acceleration.rate_r;
    case 39: return indi.g1.r;
    case 40: return indi.g2;
    case 41: return indi.adaptive;
    case 42: return indi.max_rate;
    case 43: return indi.attitude_max_yaw_rate;
    case 44: return flight_altitude;
    case 45: return nav_heading;
    case 46: return nav_radius;
    case 47: return nav_climb_vspeed;
    case 48: return nav_descend_vspeed;
    case 49: return guidance_v_kp;
    case 50: return guidance_v_kd;
    case 51: return guidance_v_ki;
    case 52: return guidance_v_nominal_throttle;
    case 53: return guidance_v_adapt_throttle_enabled;
    case 54: return guidance_v_z_sp;
    case 55: return guidance_h.use_ref;
    case 56: return gh_ref.max_speed;
    case 57: return guidance_h.approx_force_by_thrust;
    case 58: return gh_ref.tau;
    case 59: return gh_ref.omega;
    case 60: return gh_ref.zeta;
    case 61: return guidance_h.gains.p;
    case 62: return guidance_h.gains.d;
    case 63: return guidance_h.gains.i;
    case 64: return guidance_h.gains.v;
    case 65: return guidance_h.gains.a;
    case 66: return guidance_h.sp.pos.x;
    case 67: return guidance_h.sp.pos.y;
    case 68: return multi_gps_mode;
    case 69: return imu.body_to_imu.eulers_f.phi;
    case 70: return imu.body_to_imu.eulers_f.theta;
    case 71: return imu.body_to_imu.eulers_f.psi;
    case 72: return imu.b2i_set_current;
    default: return 0.;
  }
}

/* Persistent Settings */
struct PersistentSettings {
  float s_0; /* air_data.tas_factor */
  uint8_t s_1; /* air_data.calc_airspeed */
  uint8_t s_2; /* air_data.calc_tas_factor */
  uint8_t s_3; /* air_data.calc_amsl_baro */
  uint8_t s_4; /* ahrs_icq.gravity_heuristic_factor */
  float s_5; /* ahrs_icq.accel_omega */
  float s_6; /* ahrs_icq.accel_zeta */
  float s_7; /* ahrs_icq.mag_omega */
  float s_8; /* ahrs_icq.mag_zeta */
  float s_9; /* indi.reference_acceleration.err_p */
  float s_10; /* indi.reference_acceleration.rate_p */
  float s_11; /* indi.g1.p */
  float s_12; /* indi.reference_acceleration.err_q */
  float s_13; /* indi.reference_acceleration.rate_q */
  float s_14; /* indi.g1.q */
  float s_15; /* indi.reference_acceleration.err_r */
  float s_16; /* indi.reference_acceleration.rate_r */
  float s_17; /* indi.g1.r */
  float s_18; /* indi.g2 */
  uint8_t s_19; /* indi.adaptive */
  float s_20; /* guidance_v_kp */
  float s_21; /* guidance_v_kd */
  float s_22; /* guidance_v_ki */
  float s_23; /* guidance_v_nominal_throttle */
  float s_24; /* guidance_v_adapt_throttle_enabled */
  float s_25; /* guidance_h.use_ref */
  float s_26; /* gh_ref.max_speed */
  uint8_t s_27; /* guidance_h.approx_force_by_thrust */
  float s_28; /* gh_ref.tau */
  float s_29; /* gh_ref.omega */
  float s_30; /* gh_ref.zeta */
  int32_t s_31; /* guidance_h.gains.p */
  int32_t s_32; /* guidance_h.gains.d */
  int32_t s_33; /* guidance_h.gains.i */
  int32_t s_34; /* guidance_h.gains.v */
  int32_t s_35; /* guidance_h.gains.a */
  float s_36; /* imu.body_to_imu.eulers_f.phi */
  float s_37; /* imu.body_to_imu.eulers_f.theta */
  float s_38; /* imu.body_to_imu.eulers_f.psi */
};

extern struct PersistentSettings pers_settings;

static inline void persistent_settings_store( void ) {
  pers_settings.s_0 = air_data.tas_factor;
  pers_settings.s_1 = air_data.calc_airspeed;
  pers_settings.s_2 = air_data.calc_tas_factor;
  pers_settings.s_3 = air_data.calc_amsl_baro;
  pers_settings.s_4 = ahrs_icq.gravity_heuristic_factor;
  pers_settings.s_5 = ahrs_icq.accel_omega;
  pers_settings.s_6 = ahrs_icq.accel_zeta;
  pers_settings.s_7 = ahrs_icq.mag_omega;
  pers_settings.s_8 = ahrs_icq.mag_zeta;
  pers_settings.s_9 = indi.reference_acceleration.err_p;
  pers_settings.s_10 = indi.reference_acceleration.rate_p;
  pers_settings.s_11 = indi.g1.p;
  pers_settings.s_12 = indi.reference_acceleration.err_q;
  pers_settings.s_13 = indi.reference_acceleration.rate_q;
  pers_settings.s_14 = indi.g1.q;
  pers_settings.s_15 = indi.reference_acceleration.err_r;
  pers_settings.s_16 = indi.reference_acceleration.rate_r;
  pers_settings.s_17 = indi.g1.r;
  pers_settings.s_18 = indi.g2;
  pers_settings.s_19 = indi.adaptive;
  pers_settings.s_20 = guidance_v_kp;
  pers_settings.s_21 = guidance_v_kd;
  pers_settings.s_22 = guidance_v_ki;
  pers_settings.s_23 = guidance_v_nominal_throttle;
  pers_settings.s_24 = guidance_v_adapt_throttle_enabled;
  pers_settings.s_25 = guidance_h.use_ref;
  pers_settings.s_26 = gh_ref.max_speed;
  pers_settings.s_27 = guidance_h.approx_force_by_thrust;
  pers_settings.s_28 = gh_ref.tau;
  pers_settings.s_29 = gh_ref.omega;
  pers_settings.s_30 = gh_ref.zeta;
  pers_settings.s_31 = guidance_h.gains.p;
  pers_settings.s_32 = guidance_h.gains.d;
  pers_settings.s_33 = guidance_h.gains.i;
  pers_settings.s_34 = guidance_h.gains.v;
  pers_settings.s_35 = guidance_h.gains.a;
  pers_settings.s_36 = imu.body_to_imu.eulers_f.phi;
  pers_settings.s_37 = imu.body_to_imu.eulers_f.theta;
  pers_settings.s_38 = imu.body_to_imu.eulers_f.psi;
}

static inline void persistent_settings_load( void ) {
  air_data.tas_factor = pers_settings.s_0;
  air_data.calc_airspeed = pers_settings.s_1;
  air_data.calc_tas_factor = pers_settings.s_2;
  air_data.calc_amsl_baro = pers_settings.s_3;
  ahrs_icq.gravity_heuristic_factor = pers_settings.s_4;
  ahrs_int_cmpl_quat_SetAccelOmega( pers_settings.s_5 );
  ahrs_int_cmpl_quat_SetAccelZeta( pers_settings.s_6 );
  ahrs_int_cmpl_quat_SetMagOmega( pers_settings.s_7 );
  ahrs_int_cmpl_quat_SetMagZeta( pers_settings.s_8 );
  indi.reference_acceleration.err_p = pers_settings.s_9;
  indi.reference_acceleration.rate_p = pers_settings.s_10;
  indi.g1.p = pers_settings.s_11;
  indi.reference_acceleration.err_q = pers_settings.s_12;
  indi.reference_acceleration.rate_q = pers_settings.s_13;
  indi.g1.q = pers_settings.s_14;
  indi.reference_acceleration.err_r = pers_settings.s_15;
  indi.reference_acceleration.rate_r = pers_settings.s_16;
  indi.g1.r = pers_settings.s_17;
  indi.g2 = pers_settings.s_18;
  indi.adaptive = pers_settings.s_19;
  guidance_v_kp = pers_settings.s_20;
  guidance_v_kd = pers_settings.s_21;
  guidance_v_SetKi( pers_settings.s_22 );
  guidance_v_nominal_throttle = pers_settings.s_23;
  guidance_v_adapt_throttle_enabled = pers_settings.s_24;
  guidance_h_SetUseRef( pers_settings.s_25 );
  guidance_h_SetMaxSpeed( pers_settings.s_26 );
  guidance_h.approx_force_by_thrust = pers_settings.s_27;
  guidance_h_SetTau( pers_settings.s_28 );
  guidance_h_SetOmega( pers_settings.s_29 );
  guidance_h_SetZeta( pers_settings.s_30 );
  guidance_h.gains.p = pers_settings.s_31;
  guidance_h.gains.d = pers_settings.s_32;
  guidance_h_set_igain( pers_settings.s_33 );
  guidance_h.gains.v = pers_settings.s_34;
  guidance_h.gains.a = pers_settings.s_35;
  imu_SetBodyToImuPhi( pers_settings.s_36 );
  imu_SetBodyToImuTheta( pers_settings.s_37 );
  imu_SetBodyToImuPsi( pers_settings.s_38 );
}

#endif // SETTINGS_H
